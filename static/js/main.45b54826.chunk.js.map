{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45b54826.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst Titles = () => {\r\nreturn (\r\n  <div>\r\n    <h1 className='title-container__title'>Weather Finder</h1>\r\n    <h3 className='title-container__subtitle'>Find out tempature, conditions and more....</h3>\r\n  </div>\r\n)\r\n}\r\n\r\n\r\nexport default Titles\r\n","import React from 'react'\r\n\r\n\r\n\r\n\r\nconst Form = props =>\r\n\r\n<form onSubmit={props.getWeather}>\r\n    <input type = 'text' name ='city' placeholder= 'City....'/>\r\n    <input type  ='text' name ='state' placeholder=  'State...'/>\r\n    <input type = 'text' name = 'country' placeholder= 'Country...'/>\r\n    <button>Get Weather</button>\r\n</form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\n\r\n\r\nconst Weather = props =>(\r\n  <div className='weather__info'>\r\n    {\r\n      props.city && props.country && <p className=\"weather__key\">Location:\r\n      <span className=\"weather__value\"> {props.city},{props.country}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.temperature && <p className=\"weather__key\">Temperature:\r\n    <span className=\"weather__value\"> {props.temperature} degrees</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.humidity && <p className=\"weather__key\">Humidity:\r\n      <span className=\"weather__value\"> {props.humidity} % </span>\r\n      </p>\r\n    }\r\n    {\r\n      props.description &&  <p className=\"weather__key\">Conditions:\r\n      <span className=\"weather__value\"> {props.description}</span>\r\n      </p>\r\n    }\r\n    {\r\n      props.error && <p className='weather__error'>{props.error}</p>\r\n    }\r\n  </div>\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Weather\r\n","import React from 'react'\r\nimport Titles from './components/Titles'\r\nimport Form from './components/Form'\r\nimport Weather from './components/Weather'\r\n\r\n\r\nconst API_KEY = `3606c7413cc1fe576054a69cd022e55f`\r\n\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    state: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  getWeather = async(e) => {\r\n    e.preventDefault()\r\n    const city = e.target.elements.city.value\r\n    const country = e.target.elements.country.value\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`)\r\n    const data = await api_call.json()\r\n\r\n    if (city  && country ){\r\n\r\n    this.setState({\r\n      temperature: data.main.temp,\r\n      city:data.name,\r\n      country: data.sys.country,\r\n      humidity: data.main.humidity,\r\n      description:data.weather[0].description,\r\n      error: ''\r\n  })\r\n} else {\r\n  this.setState({\r\n    temperature: undefined,\r\n    city:undefined,\r\n    state:undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description:undefined,\r\n    error: 'Please enter the value'\r\n})\r\n\r\n}\r\n}\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Titles />\r\n               </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather}/>\r\n                  <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    state={this.state.state}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n//import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}